/**
 * Saved locations event handlers
 * Manages interactions between locations service, UI, and other modules
 */

import { LocationsService } from './LocationsService.js';
import { LocationsUI } from './LocationsUI.js';
import { SearchService } from '../maps/SearchService.js';
import { MarkerService } from '../maps/MarkerService.js';
import { AuthUI } from '../auth/AuthUI.js';
import { StateManager } from '../state/AppState.js';

/**
 * Locations Handlers Class
 */
export class LocationsHandlers {

  /**
   * Initialize locations handlers
   */
  static initialize() {
    console.log('üéØ Initializing Locations Handlers');
    
    this.setupEventListeners();
    
    console.log('‚úÖ Locations Handlers initialized');
  }

  /**
   * Setup global event listeners
   */
  static setupEventListeners() {
    // Handle save location requests from info windows
    document.addEventListener('save-location', this.handleSaveLocationRequest.bind(this));
    
    // Handle view location on map requests
    document.addEventListener('view-location', this.handleViewLocationRequest.bind(this));
    
    // Handle location service events
    document.addEventListener('location-saved', this.handleLocationSaved.bind(this));
    document.addEventListener('location-deleted', this.handleLocationDeleted.bind(this));
    document.addEventListener('save-error', this.handleSaveError.bind(this));
    document.addEventListener('delete-error', this.handleDeleteError.bind(this));
    
    // Handle notification requests
    document.addEventListener('show-notification', this.handleNotificationRequest.bind(this));
    
    // Handle authentication state changes
    document.addEventListener('user-logged-in', this.handleUserLoggedIn.bind(this));
    document.addEventListener('user-logged-out', this.handleUserLoggedOut.bind(this));
  }

  // ... rest of the file content ...

  /**
   * Handle save location form submission
   * @param {Event} event - Form submit event
   */
  static async handleSaveLocationFormSubmit(event) {
    event.preventDefault();
    
    const dialog = document.getElementById('save-location-dialog');
    const locationData = dialog.locationData;
    
    // Helper function to combine dropdown and textarea values
    const combineDropdownAndText = (dropdownId, textareaId) => {
      const dropdown = document.getElementById(dropdownId);
      const textarea = document.getElementById(textareaId);
      const dropdownValue = dropdown.value;
      const textareaValue = textarea.value.trim();
      
      if (dropdownValue && dropdownValue !== 'custom') {
        // If dropdown has a value and textarea also has content
        if (textareaValue) {
          // Check if dropdown value is already in textarea
          if (!textareaValue.includes(dropdownValue)) {
            return `${dropdownValue}. ${textareaValue}`;
          }
          return textareaValue;
        }
        // Only dropdown value
        return dropdownValue;
      }
      // Only textarea value or empty
      return textareaValue || null;
    };
    
    // Get form data including new fields with combined dropdown and textarea values
    const formData = {
      name: document.getElementById('location-name').value,
      type: document.getElementById('location-type').value || null,
      description: document.getElementById('location-description').value,
      entry_point: combineDropdownAndText('location-entry-point', 'location-entry-text'),
      parking: combineDropdownAndText('location-parking', 'location-parking-text'),
      accessibility: combineDropdownAndText('location-accessibility', 'location-accessibility-text'),
      lat: parseFloat(document.getElementById('location-lat').value),
      lng: parseFloat(document.getElementById('location-lng').value),
      address: document.getElementById('location-address').value || null,
      place_id: document.getElementById('location-place-id').value || null,
      phone: document.getElementById('location-phone').value || null,
      website: document.getElementById('location-website').value || null,
      // Only include photo URLs that aren't empty
      photos: Array.from(document.querySelectorAll('.photo-url')).map(el => el.value).filter(url => url)
    };
    
    try {
      // Show saving indicator
      const saveButton = document.getElementById('save-location-button');
      if (saveButton) {
        saveButton.innerHTML = '<span class="spinner"></span> Saving...';
        saveButton.disabled = true;
      }
      
      // Save location to service
      await LocationsService.saveLocation(formData);
      
      // Hide dialog
      this.hideSaveLocationDialog();
      
      // Show success notification
      AuthUI.showNotification('Location saved successfully!', 'success');
      
    } catch (error) {
      console.error('‚ùå Error saving location:', error);
      AuthUI.showNotification(`Failed to save location: ${error.message}`, 'error');
      
      // Reset save button
      const saveButton = document.getElementById('save-location-button');
      if (saveButton) {
        saveButton.innerHTML = 'Save Location';
        saveButton.disabled = false;
      }
    }
  }

  /**
   * Handle location form submission
   * @param {Event} event - Form submit event
   */
  static async handleLocationFormSubmit(event) {
    event.preventDefault();
    
    const dialog = document.getElementById('save-location-dialog');
    const locationData = dialog.locationData;
    
    // Helper function to combine dropdown and textarea values
    const combineDropdownAndText = (dropdownId, textareaId) => {
      const dropdown = document.getElementById(dropdownId);
      const textarea = document.getElementById(textareaId);
      const dropdownValue = dropdown.value;
      const textareaValue = textarea.value.trim();
      
      if (dropdownValue && dropdownValue !== 'custom') {
        // If dropdown has a value and textarea also has content
        if (textareaValue) {
          // Check if dropdown value is already in textarea
          if (!textareaValue.includes(dropdownValue)) {
            return `${dropdownValue}. ${textareaValue}`;
          }
          return textareaValue;
        }
        // Only dropdown value
        return dropdownValue;
      }
      // Only textarea value or empty
      return textareaValue || null;
    };
    
    // Get form data including new fields with combined dropdown and textarea values
    const formData = {
      name: document.getElementById('location-name').value,
      type: document.getElementById('location-type').value || null,
      description: document.getElementById('location-description').value,
      entry_point: combineDropdownAndText('location-entry-point', 'location-entry-text'),
      parking: combineDropdownAndText('location-parking', 'location-parking-text'),
      accessibility: combineDropdownAndText('location-accessibility', 'location-accessibility-text'),
      lat: parseFloat(document.getElementById('location-lat').value),
      lng: parseFloat(document.getElementById('location-lng').value),
      address: document.getElementById('location-address').value || null,
      place_id: document.getElementById('location-place-id').value || null,
      phone: document.getElementById('location-phone').value || null,
      website: document.getElementById('location-website').value || null,
      // Only include photo URLs that aren't empty
      photos: Array.from(document.querySelectorAll('.photo-url')).map(el => el.value).filter(url => url)
    };
    
    try {
      // Show saving indicator
      const saveButton = document.getElementById('save-location-button');
      if (saveButton) {
        saveButton.innerHTML = '<span class="spinner"></span> Saving...';
        saveButton.disabled = true;
      }
      
      // Save location to service
      await LocationsService.saveLocation(formData);
      
      // Hide dialog
      this.hideLocationDialog();
      
      // Show success notification
      AuthUI.showNotification('Location saved successfully!', 'success');
      
    } catch (error) {
      console.error('‚ùå Error saving location:', error);
      AuthUI.showNotification(`Failed to save location: ${error.message}`, 'error');
      
      // Reset save button
      const saveButton = document.getElementById('save-location-button');
      if (saveButton) {
        saveButton.innerHTML = 'Save Location';
        saveButton.disabled = false;
      }
    }
  }
}
